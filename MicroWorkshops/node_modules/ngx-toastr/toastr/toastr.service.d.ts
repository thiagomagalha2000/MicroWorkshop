import { ComponentRef, Injector, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { Overlay } from '../overlay/overlay';
import { ToastRef } from './toast-injector';
import { ToastContainerDirective } from './toast.directive';
import { GlobalConfig, IndividualConfig, ToastToken } from './toastr-config';
import * as ɵngcc0 from '@angular/core';
export interface ActiveToast<C> {
    /** Your Toast ID. Use this to close it individually */
    toastId: number;
    /** the message of your toast. Stored to prevent duplicates */
    message: string;
    /** a reference to the component see portal.ts */
    portal: ComponentRef<C>;
    /** a reference to your toast */
    toastRef: ToastRef<C>;
    /** triggered when toast is active */
    onShown: Observable<void>;
    /** triggered when toast is destroyed */
    onHidden: Observable<void>;
    /** triggered on toast click */
    onTap: Observable<void>;
    /** available for your use in custom toast */
    onAction: Observable<any>;
}
export declare class ToastrService {
    private overlay;
    private _injector;
    private sanitizer;
    private ngZone;
    toastrConfig: GlobalConfig;
    currentlyActive: number;
    toasts: ActiveToast<any>[];
    overlayContainer?: ToastContainerDirective;
    previousToastMessage: string | undefined;
    private index;
    constructor(token: ToastToken, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer, ngZone: NgZone);
    /** show toast */
    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast<any>;
    /** show successful toast */
    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show error toast */
    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show info toast */
    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show warning toast */
    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /**
     * Remove all or a single toast by id
     */
    clear(toastId?: number): void;
    /**
     * Remove and destroy a single toast by id
     */
    remove(toastId: number): boolean;
    /**
     * Determines if toast message is already shown
     */
    findDuplicate(message?: string, resetOnDuplicate?: boolean, countDuplicates?: boolean): ActiveToast<any>;
    /** create a clone of global config and apply individual settings */
    private applyConfig;
    /**
     * Find toast object by id
     */
    private _findToast;
    /**
     * Determines the need to run inside angular's zone then builds the toast
     */
    private _preBuildNotification;
    /**
     * Creates and attaches toast data to component
     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.
     */
    private _buildNotification;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastrService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidG9hc3RyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdG9yLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJy4uL292ZXJsYXkvb3ZlcmxheSc7XG5pbXBvcnQgeyBUb2FzdFJlZiB9IGZyb20gJy4vdG9hc3QtaW5qZWN0b3InO1xuaW1wb3J0IHsgVG9hc3RDb250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuL3RvYXN0LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBHbG9iYWxDb25maWcsIEluZGl2aWR1YWxDb25maWcsIFRvYXN0VG9rZW4gfSBmcm9tICcuL3RvYXN0ci1jb25maWcnO1xuZXhwb3J0IGludGVyZmFjZSBBY3RpdmVUb2FzdDxDPiB7XG4gICAgLyoqIFlvdXIgVG9hc3QgSUQuIFVzZSB0aGlzIHRvIGNsb3NlIGl0IGluZGl2aWR1YWxseSAqL1xuICAgIHRvYXN0SWQ6IG51bWJlcjtcbiAgICAvKiogdGhlIG1lc3NhZ2Ugb2YgeW91ciB0b2FzdC4gU3RvcmVkIHRvIHByZXZlbnQgZHVwbGljYXRlcyAqL1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICAvKiogYSByZWZlcmVuY2UgdG8gdGhlIGNvbXBvbmVudCBzZWUgcG9ydGFsLnRzICovXG4gICAgcG9ydGFsOiBDb21wb25lbnRSZWY8Qz47XG4gICAgLyoqIGEgcmVmZXJlbmNlIHRvIHlvdXIgdG9hc3QgKi9cbiAgICB0b2FzdFJlZjogVG9hc3RSZWY8Qz47XG4gICAgLyoqIHRyaWdnZXJlZCB3aGVuIHRvYXN0IGlzIGFjdGl2ZSAqL1xuICAgIG9uU2hvd246IE9ic2VydmFibGU8dm9pZD47XG4gICAgLyoqIHRyaWdnZXJlZCB3aGVuIHRvYXN0IGlzIGRlc3Ryb3llZCAqL1xuICAgIG9uSGlkZGVuOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIC8qKiB0cmlnZ2VyZWQgb24gdG9hc3QgY2xpY2sgKi9cbiAgICBvblRhcDogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICAvKiogYXZhaWxhYmxlIGZvciB5b3VyIHVzZSBpbiBjdXN0b20gdG9hc3QgKi9cbiAgICBvbkFjdGlvbjogT2JzZXJ2YWJsZTxhbnk+O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RyU2VydmljZSB7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgX2luamVjdG9yO1xuICAgIHByaXZhdGUgc2FuaXRpemVyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHRvYXN0ckNvbmZpZzogR2xvYmFsQ29uZmlnO1xuICAgIGN1cnJlbnRseUFjdGl2ZTogbnVtYmVyO1xuICAgIHRvYXN0czogQWN0aXZlVG9hc3Q8YW55PltdO1xuICAgIG92ZXJsYXlDb250YWluZXI/OiBUb2FzdENvbnRhaW5lckRpcmVjdGl2ZTtcbiAgICBwcmV2aW91c1RvYXN0TWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgaW5kZXg7XG4gICAgY29uc3RydWN0b3IodG9rZW46IFRvYXN0VG9rZW4sIG92ZXJsYXk6IE92ZXJsYXksIF9pbmplY3RvcjogSW5qZWN0b3IsIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgLyoqIHNob3cgdG9hc3QgKi9cbiAgICBzaG93KG1lc3NhZ2U/OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvdmVycmlkZT86IFBhcnRpYWw8SW5kaXZpZHVhbENvbmZpZz4sIHR5cGU/OiBzdHJpbmcpOiBBY3RpdmVUb2FzdDxhbnk+O1xuICAgIC8qKiBzaG93IHN1Y2Nlc3NmdWwgdG9hc3QgKi9cbiAgICBzdWNjZXNzKG1lc3NhZ2U/OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvdmVycmlkZT86IFBhcnRpYWw8SW5kaXZpZHVhbENvbmZpZz4pOiBBY3RpdmVUb2FzdDxhbnk+O1xuICAgIC8qKiBzaG93IGVycm9yIHRvYXN0ICovXG4gICAgZXJyb3IobWVzc2FnZT86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIG92ZXJyaWRlPzogUGFydGlhbDxJbmRpdmlkdWFsQ29uZmlnPik6IEFjdGl2ZVRvYXN0PGFueT47XG4gICAgLyoqIHNob3cgaW5mbyB0b2FzdCAqL1xuICAgIGluZm8obWVzc2FnZT86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIG92ZXJyaWRlPzogUGFydGlhbDxJbmRpdmlkdWFsQ29uZmlnPik6IEFjdGl2ZVRvYXN0PGFueT47XG4gICAgLyoqIHNob3cgd2FybmluZyB0b2FzdCAqL1xuICAgIHdhcm5pbmcobWVzc2FnZT86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIG92ZXJyaWRlPzogUGFydGlhbDxJbmRpdmlkdWFsQ29uZmlnPik6IEFjdGl2ZVRvYXN0PGFueT47XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCBvciBhIHNpbmdsZSB0b2FzdCBieSBpZFxuICAgICAqL1xuICAgIGNsZWFyKHRvYXN0SWQ/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbmQgZGVzdHJveSBhIHNpbmdsZSB0b2FzdCBieSBpZFxuICAgICAqL1xuICAgIHJlbW92ZSh0b2FzdElkOiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdG9hc3QgbWVzc2FnZSBpcyBhbHJlYWR5IHNob3duXG4gICAgICovXG4gICAgZmluZER1cGxpY2F0ZShtZXNzYWdlPzogc3RyaW5nLCByZXNldE9uRHVwbGljYXRlPzogYm9vbGVhbiwgY291bnREdXBsaWNhdGVzPzogYm9vbGVhbik6IEFjdGl2ZVRvYXN0PGFueT47XG4gICAgLyoqIGNyZWF0ZSBhIGNsb25lIG9mIGdsb2JhbCBjb25maWcgYW5kIGFwcGx5IGluZGl2aWR1YWwgc2V0dGluZ3MgKi9cbiAgICBwcml2YXRlIGFwcGx5Q29uZmlnO1xuICAgIC8qKlxuICAgICAqIEZpbmQgdG9hc3Qgb2JqZWN0IGJ5IGlkXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZmluZFRvYXN0O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIG5lZWQgdG8gcnVuIGluc2lkZSBhbmd1bGFyJ3Mgem9uZSB0aGVuIGJ1aWxkcyB0aGUgdG9hc3RcbiAgICAgKi9cbiAgICBwcml2YXRlIF9wcmVCdWlsZE5vdGlmaWNhdGlvbjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCBhdHRhY2hlcyB0b2FzdCBkYXRhIHRvIGNvbXBvbmVudFxuICAgICAqIHJldHVybnMgdGhlIGFjdGl2ZSB0b2FzdCwgb3IgaW4gY2FzZSBwcmV2ZW50RHVwbGljYXRlcyBpcyBlbmFibGVkIHRoZSBvcmlnaW5hbC9ub24tZHVwbGljYXRlIGFjdGl2ZSB0b2FzdC5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9idWlsZE5vdGlmaWNhdGlvbjtcbn1cbiJdfQ==